datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  username     String       @db.String
  password     String       @db.String
  refreshToken String?      @db.String
  role         String       @default("user")
  minBill      Float        @default(0) @db.Double
  maxBill      Float        @default(1500) @db.Double
  linkBot      String?      @db.String
  avatar       userAvatar?
  isRus        Boolean      @default(false)
  isDark       Boolean      @default(false)
  clients      Client[]
  Recognizer   Recognizer[]

  @@map("users")
}

model userAvatar {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  path      String @db.String
  publicUrl String @db.String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique @db.ObjectId

  @@map("userAvatar")
}

model Client {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  face_id        String[]  @db.String
  name           String    @default("Unknown client") @db.String
  status         String    @default("ghost") @db.String
  phone          String    @default("") @db.String
  averageBill    Float?    @default(0) @db.Double
  billsAmount    Int       @default(0) @db.Int
  lastIdentified DateTime? @db.Date

  images  Image[]
  exises  Exis[]
  visits  Visit[]
  similar Similar[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("clients")
}

model Image {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  path      String @db.String
  publicUrl String @db.String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @db.ObjectId

  @@map("images")
}

model Similar {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  face_id String        @db.String
  image   SimilarImage?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @db.ObjectId

  @@map("similar")
}

model SimilarImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  path      String  @db.String
  publicUrl String  @db.String
  similar   Similar @relation(fields: [similarId], references: [id])
  similarId String  @unique @db.ObjectId

  @@map("similarImages")
}

model Visit {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime @default(now()) @db.Date

  exis     Exis[]
  exisId   String[] @db.ObjectId
  client   Client   @relation(fields: [clientId], references: [id])
  clientId String   @db.ObjectId

  @@map("visits")
}

model Exis {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime @default(now()) @db.Date
  text     String   @db.String
  isPinned Boolean  @default(false) @db.Bool

  visit    Visit?  @relation(fields: [visitId], references: [id])
  visitId  String? @db.ObjectId
  client   Client  @relation(fields: [clientId], references: [id])
  clientId String  @db.ObjectId

  @@map("exises")
}

model Recognizer {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  device_id String @unique @db.String
  device_ip String @db.String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("recognizers")
}
